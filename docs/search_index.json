[
["index.html", "Using GIS for invasive species research 1 Overview 1.1 Project objectives 1.2 My notes 1.3 Get started…", " Using GIS for invasive species research Anthony Davidson 2019-09-04 1 Overview This respository contains a collection of dynamic programming tools and introductory tutorials for 1.1 Project objectives The overall objective is to create a landing page and collection of GIS work in R. All the examples will focus on invasive species dynamics. The current goals that also meet the requirements to produce the figures needed for reproducible phd research. 1.1.1 Objective one Produce static maps for the first publication of my PhD. Draft here - Davidson2019a 1.1.1.1 Datasets Grid locations are in a kmz file called “invasive-species-location-research.kmz” here kml file still called “invasive-species-location-research.kmz” currently Outline of NZ here \"\" here Forest vegetation here \"\" here Data from landCare 2019 publication here \"\" here Rcode My attempt so far \"\" here GIS cheat \"\" here Powerpoint cheat \"\" here Static maps NZ beech forest dynamics \"\" here 8 grids full data \"\" here only 6 used \"\" here South Island of NZ \"\" here Two: Produce static maps for the following data-set [Davidson2019b] [same as above] Three: Produce static maps for the following data-set [Davidson2019c] [same as above] 1.2 My notes Vignettes Creating maps in R “www.ssnhub.com/creating-maps-in-r.html” Map for Chapter 2: Beech forests \"\" Examples LandCare 2019 publication here \"\" 1.3 Get started… Fork this repo here Pull project into Rstudio using version control. 1567561101782 Ensure that your local RStudio packages are up to date. For more details this following the same contributing options as the website instructions here. Note This book is built from the absolute minimum you need to start a bookdown book. You can find the preview of the unmodified template of the book at http://seankross.com/bookdown-start/ All of the content of this repository is licensed CC0. The content of the mapping/GIS was orginally forked from from the following github repositories: Creating maps in R: A textbook on geocomputational analysis in R 1.3.1 Packages To run this book in RStudio the following packages are needed. tidyverse MapView: a 3D interactive R packages Video library(spData) ## To access larger datasets in this package, install the spDataLarge ## package with: `install.packages(&#39;spDataLarge&#39;, ## repos=&#39;https://nowosad.github.io/drat/&#39;, type=&#39;source&#39;)` library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union library(sf) ## Linking to GEOS 3.6.1, GDAL 2.2.3, PROJ 4.9.3 library(bookdown) library(leaflet) library(leaflet.extras) library(geojsonio) ## ## Attaching package: &#39;geojsonio&#39; ## The following object is masked from &#39;package:base&#39;: ## ## pretty "],
["intro.html", " 2 Introduction", " 2 Introduction Creating maps using spatial data in R GIS is an area of R coding I have kept away from hoping that I would work it out at a later date. Sadly, it has got to the point where I want to be able to build more complex maps in shiny applications towards the end of my PhD and need to create a base of code to go from. Luckily, the text book “Spatial Analysis in R” has just come out in its second edition and is available in as a bookdown repository including the full text here. This page is a outline of the current resources I am working on and using for my publication and website maps. I have begun by using my normal reproducible workflow and file structure. 2.0.1 WMS Tiles You can use addWMSTiles() to add WMS (Web Map Service) tiles. The map below shows the Base Reflectivity (a measure of the intensity of precipitation occurring) using the WMS from the Iowa Environmental Mesonet: leaflet() %&gt;% addTiles() %&gt;% setView(-93.65, 42.0285, zoom = 4) %&gt;% addWMSTiles( &quot;http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi&quot;, layers = &quot;nexrad-n0r-900913&quot;, options = WMSTileOptions(format = &quot;image/png&quot;, transparent = TRUE), attribution = &quot;Weather data © 2012 IEM Nexrad&quot; ) "],
["divingin.html", " 3 Diving In 3.1 Extra resources 3.2 Using Basemaps 3.3 Choropleths", " 3 Diving In There are plenty of github repositories explaining the different types of GIS and using R. Below is the public google-my-maps map that can be modified an worked on from within the window provided below. {: .box-note} Note: This can currently me modified and changed by anyone with the link. As it comes more important for the dataset to not be modified by others we will tighten this process up using the leaflet and shiny app process we are using for the mapping and analysis at the bottom of this post. So far we have saved a leaflet rmd file as an html file and pasted it from the includes folder of the website. We will tighten this up too. :) 3.1 Extra resources To begin with check this is working in your local RStudio enviroment Install the required packages. You need a recent version of the GDAL, GEOS, Proj.4, and UDUNITS libraries installed for this to work on Mac and Linux. More information on that at https://github.com/r-spatial/sf#installling. # devtools::install_github(&quot;robinlovelace/geocompr&quot;) Load the ones we need: library(spData) library(dplyr) library(sf) library(bookdown) library(leaflet) library(leaflet.extras) library(geojsonio) Check it’s all working, e.g. with this command: world %&gt;% plot() And some blogging on the matter here. 3.1.0.1 Content below from leaflet github account 3.2 Using Basemaps Leaflet supports basemaps using map tiles, popularized by Google Maps and now used by nearly all interactive web maps. 3.2.1 Default (OpenStreetMap) Tiles The easiest way to add tiles is by calling addTiles() with no arguments; by default, OpenStreetMap tiles are used. m &lt;- leaflet() %&gt;% setView(lng = -71.0589, lat = 42.3601, zoom = 12) m %&gt;% addTiles() 3.2.2 Third-Party Tiles Alternatively, many popular free third-party basemaps can be added using the addProviderTiles() function, which is implemented using the leaflet-providers plugin. See here for the complete set. As a convenience, leaflet also provides a named list of all the third-party tile providers that are supported by the plugin. This enables you to use auto-completion feature of your favorite R IDE (like RStudio) and not have to remember or look up supported tile providers; just type providers$ and choose from one of the options. You can also use names(providers) to view all of the options. m %&gt;% addProviderTiles(providers$Stamen.Toner) m %&gt;% addProviderTiles(providers$CartoDB.Positron) m %&gt;% addProviderTiles(providers$Esri.NatGeoWorldMap) Note that some tile set providers require you to register; see the project page for more information. You can pass access tokens/keys, and other options, to the tile provider by populating the options argument with the providerTileOptions() function. 3.2.3 Custom Tile URL Template If you happen to have a custom map tile URL template to use, you can provide it as an argument to addTiles(). 3.2.4 WMS Tiles You can use addWMSTiles() to add WMS (Web Map Service) tiles. The map below shows the Base Reflectivity (a measure of the intensity of precipitation occurring) using the WMS from the Iowa Environmental Mesonet: leaflet() %&gt;% addTiles() %&gt;% setView(-93.65, 42.0285, zoom = 4) %&gt;% addWMSTiles( &quot;http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi&quot;, layers = &quot;nexrad-n0r-900913&quot;, options = WMSTileOptions(format = &quot;image/png&quot;, transparent = TRUE), attribution = &quot;Weather data © 2012 IEM Nexrad&quot; ) 3.2.5 Combining Tile Layers You aren’t restricted to using a single basemap on a map; you can stack them by adding multiple tile layers. This generally only makes sense if the front tiles consist of semi transparent tiles, or have an adjusted opacity via the options argument. m %&gt;% addProviderTiles(providers$MtbMap) %&gt;% addProviderTiles(providers$Stamen.TonerLines, options = providerTileOptions(opacity = 0.35)) %&gt;% addProviderTiles(providers$Stamen.TonerLabels) 3.3 Choropleths Making choropleths with leaflet is easy. In this example, we’ll duplicate the step-by-step choropleth tutorial from the Leaflet.js website. The final result will look like this (scroll to the end to see the completed code): ## [1] &quot;SpatialPolygonsDataFrame&quot; ## attr(,&quot;package&quot;) ## [1] &quot;sp&quot; 3.3.1 Data source We’ll start by loading the data from JSON. While the Leaflet.js example loads the JSON directly into JavaScript, with the Leaflet R package we instead want to load the data into R. In this case, we’ll use the geojsonio package to load the data into sp objects, which will let us easily manipulate the geographic features, and their properties, in R. # states &lt;- geojsonio::geojson_read(&quot;json/us-states.geojson&quot;, what = &quot;sp&quot;) class(states) ## [1] &quot;SpatialPolygonsDataFrame&quot; ## attr(,&quot;package&quot;) ## [1] &quot;sp&quot; names(states) ## [1] &quot;id&quot; &quot;name&quot; &quot;density&quot; As you can see, we now have a SpatialPolygonsDataFrame with name (state name) and density (population density in people/mi2) columns from the GeoJSON. 3.3.2 Basic states map Next, let’s make a basic map with just the outline of the states. For our basemap, we’ll use the same \"mapbox.light\" MapBox style that the example does; if you don’t have a MapBox account, you can just use addTiles() in place of the addProviderTiles call, or choose a free provider. m &lt;- leaflet(states) %&gt;% setView(-96, 37.8, 4) %&gt;% addProviderTiles(&quot;MapBox&quot;, options = providerTileOptions( id = &quot;mapbox.light&quot;, accessToken = Sys.getenv(&#39;MAPBOX_ACCESS_TOKEN&#39;))) We’ve saved the basic basemap as a separate variable m so we can easily iterate on the addPolygons call as we work through the rest of the tutorial. To add uniform polygons with default styling, just call addPolygons with no additional arguments. m %&gt;% addPolygons() 3.3.3 Adding some color Now, let’s color the states according to their population density. You have various options for mapping data to colors; for this example we’ll match the Leaflet.js tutorial by mapping a specific set of bins into RColorBrewer colors. First, we’ll define the bins. This is a numeric vector that defines the boundaries between intervals ((0,10], (10,20], and so on). Then, we’ll call colorBin to generate a palette function that maps the RColorBrewer \"YlOrRd\" colors to our bins. Finally, we’ll modify addPolygons to use the palette function and the density values to generate a vector of colors for fillColor, and also add some other static style properties. bins &lt;- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf) pal &lt;- colorBin(&quot;YlOrRd&quot;, domain = states$density, bins = bins) m %&gt;% addPolygons( fillColor = ~pal(density), weight = 2, opacity = 1, color = &quot;white&quot;, dashArray = &quot;3&quot;, fillOpacity = 0.7) 3.3.4 Adding interaction The next thing we’ll want is to make the polygons highlight as the mouse passes over them. The addPolygon function has a highlight argument that makes this simple. m %&gt;% addPolygons( fillColor = ~pal(density), weight = 2, opacity = 1, color = &quot;white&quot;, dashArray = &quot;3&quot;, fillOpacity = 0.7, highlight = highlightOptions( weight = 5, color = &quot;#666&quot;, dashArray = &quot;&quot;, fillOpacity = 0.7, bringToFront = TRUE)) (The Leaflet.js tutorial also adds an event handler that zooms into a state when it’s clicked. This isn’t currently possible with the Leaflet R package, except with either custom JavaScript or using Shiny, both of which are outside the scope of this example.) 3.3.5 Custom info Now let’s expose the state names and values to the user. The Leaflet.js tutorial shows the hovered-over state’s information in a custom control. Again, that’s possible by adding custom JavaScript or using Shiny, but for this example we’ll use the built-in labels feature instead. We’ll generate the labels by handcrafting some HTML, and passing it to lapply(htmltools::HTML) so that Leaflet knows to treat each label as HTML instead of as plain text. We’ll also set some label options to improve the style of the label element itself. labels &lt;- sprintf( &quot;&lt;strong&gt;%s&lt;/strong&gt;&lt;br/&gt;%g people / mi&lt;sup&gt;2&lt;/sup&gt;&quot;, states$name, states$density ) %&gt;% lapply(htmltools::HTML) m &lt;- m %&gt;% addPolygons( fillColor = ~pal(density), weight = 2, opacity = 1, color = &quot;white&quot;, dashArray = &quot;3&quot;, fillOpacity = 0.7, highlight = highlightOptions( weight = 5, color = &quot;#666&quot;, dashArray = &quot;&quot;, fillOpacity = 0.7, bringToFront = TRUE), label = labels, labelOptions = labelOptions( style = list(&quot;font-weight&quot; = &quot;normal&quot;, padding = &quot;3px 8px&quot;), textsize = &quot;15px&quot;, direction = &quot;auto&quot;)) m This is the final version of our polygon layer, so let’s save the result back to the m variable. 3.3.6 Legend As our final step, let’s add a legend. Because we chose to color our map using colorBin, the addLegend function makes it particularly easy to add a legend with the correct colors and intervals. m %&gt;% addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL, position = &quot;bottomright&quot;) library(leaflet) library(leaflet.extras) "],
["outputs.html", " 4 Outputs 4.1 My Notes", " 4 Outputs Using and applying GIS techniques in R has become much easier since the additional functionality of Java-script libraries. One of these libraries in the leaflet library for mapping. Below are some examples of these mapping tools with examples. I like the idea of know what to do in arcGIS so that it is easy to work with researchers that use either R or arcGIS. For a GIS map there are two main options. Here are the resources for building interactive and static maps in R using a range of different packages: ’leaflet` 4.0.1 A single location on a map Here is the birthplace of R plotted with leaflet, addTiles and the addMarkers… 4.0.2 Leaflet plot options still coming 4.1 My Notes I have sent the following to Matt to input into arcGIS and compare rendered maps. # grid.locations &lt;- # label add hand drawn image here 4.1.1 Extracting mymaps data This is for security reasons. library(leaflet) library(leaflet.extras) "],
["resources.html", " 5 Resources 5.1 A single location on a map 5.2 Leaflet plots 5.3 My Notes", " 5 Resources Using and applying GIS techniques in R has become much easier since the additional functionality of Java-script libraries. One of these libraries in the leaflet library for mapping. Below are some examples of these mapping tools with examples. I like the idea of know what to do in arcGIS so that it is easy to work with researchers that use either R or arcGIS. For a GIS map there are two main options. Here are the resources for building interactive and static maps in R using a range of different packages: ’leaflet` 5.1 A single location on a map Here is the birthplace of R plotted with leaflet, addTiles and the addMarkers… 5.2 Leaflet plots still coming 5.3 My Notes I have sent the following to Matt to input into arcGIS and compare rendered maps. # grid.locations &lt;- # label add hand drawn image here 5.3.1 Extracting mymaps data This is for security reasons. library(leaflet) library(leaflet.extras) Tab Name 1 Tab Name 2 "],
["tabs.html", " 6 Leaflet tabs", " 6 Leaflet tabs ## Tests {.tabset} Still working on this… Would be nice if something like this would work. And the headings and tabs function is not working. (For coding reasons not yet known by me but should be basic) "]
]
